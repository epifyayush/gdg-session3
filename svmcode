import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
df = pd.read_csv("/diabetes (2).csv")

# Display dataset information
df.head(10)
df.tail()
df.describe()
df.shape

# Check for missing values
print("\n Missing values: \n", df.isnull().sum())

# Separate features and target variable
x = df.drop(columns=["Outcome"])
y = df["Outcome"]

# Visualizing diabetes outcome distribution
counts = df['Outcome'].value_counts()
counts.plot(kind='bar', color=['blue', 'orange'])
plt.xlabel("Diabetes outcome (0 = No, 1 = Yes)")
plt.xticks(rotation=0)
plt.ylabel("Count")
plt.title("Distribution of Diabetes Outcome")
plt.show()

# Visualizing glucose levels distribution
plt.hist(df[df['Outcome'] == 0]["Glucose"], bins=20, color='blue', alpha=0.5, label='No Diabetes')
plt.hist(df[df['Outcome'] == 1]["Glucose"], bins=20, color='orange', alpha=0.5, label='Diabetes')
plt.xlabel("Glucose Level")
plt.ylabel("Count")
plt.title("Distribution of Glucose Levels for Diabetes Outcome")
plt.legend()
plt.show()

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Scale the features
scalar = StandardScaler()
X_train_scaled = scalar.fit_transform(X_train)
X_test_scaled = scalar.transform(X_test)

# Train the SVM model
model = SVC(kernel='linear', C=1.0)
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred) * 100
print(f"Accuracy: {accuracy:.2f}%")
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Predict a new patient outcome
new_patient = np.array([[2, 250, 30, 45, 100, 35.0, 0.5, 55]])
new_patient_scaled = scalar.transform(new_patient)
prediction = model.predict(new_patient_scaled)
print("\nPredicted Diabetes outcome for new patient:", "Diabetic" if prediction[0] == 1 else "Not Diabetic")
